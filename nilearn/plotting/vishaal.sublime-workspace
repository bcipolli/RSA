{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"is",
				"isinstance"
			],
			[
				"memory",
				"memory_level"
			],
			[
				"ni",
				"ni"
			],
			[
				"assert",
				"assert_warns_regex"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"pdist",
				"Snippet: disp sprintf"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"packin",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Discover Packages"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/bcipolli/code/GURU/vishaal"
	],
	"file_history":
	[
		"/Users/bcipolli/code/MRI/nilearn/nilearn/tests/test_masking.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/plotting/displays.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/plotting/img_plotting.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/connectivity/plot_canica_resting_state.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/manipulating_visualizing/plot_roi_extraction.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/decoding/plot_simulated_data.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/plotting/mosaic.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/input_data/base_masker.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/image/image.py",
		"/Users/bcipolli/code/MRI/nilearn/issues/issue449.py",
		"/Users/bcipolli/code/MRI/nilearn/issues/issue440.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/masking.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/decomposition/tests/test_canica.py",
		"/Users/bcipolli/code/MRI/nilearn/issues/newissue2.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/input_data/tests/test_nifti_masker.py",
		"/Users/bcipolli/code/MRI/nilearn/issues/newissue.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/_utils/niimg_conversions.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/input_data/nifti_maps_masker.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/tests/test_niimg_conversions.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/tests/test_cache_mixin.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/_utils/__init__.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/_utils/class_inspect.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/_utils/fixes/sklearn_f_regression_nosparse.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/_utils/logger.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/_utils/testing.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/manipulating_visualizing/plot_haxby_mass_univariate.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/tests/data/confounds_with_header.csv",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/_utils/cache_mixin.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/plotting/glass_brain_files/svg_to_json_converter.py",
		"/Users/bcipolli/code/MRI/nilearn/Makefile",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/plotting/find_cuts.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/caching.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/__init__.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/tests/test_signal.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/plot_localizer_simple_analysis.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/connectivity/plot_adhd_covariance.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/plotting/__init__.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/decomposition/canica.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/connectivity/plot_rest_spectral.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/plotting/tests/test_img_plotting.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/connectivity/plot_adhd_covariance_byhemi.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/mass_univariate/tests/test_permuted_least_squares.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/manipulating_visualizing/plot_atlas.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/image/tests/test_image.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/connectivity/plot_rest_clustering.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/image/resampling.py",
		"/Users/bcipolli/code/MRI/nilearn/research/plot_canica_RSA.py",
		"/Users/bcipolli/code/MRI/nilearn/research/plot_canica_components.py",
		"/Users/bcipolli/code/MRI/nilearn/research/plot_play.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/input_data/nifti_masker.py",
		"/Users/bcipolli/code/MRI/nilearn/README.rst",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/mass_univariate/rpbi.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/decoding/plot_oasis_vbm_rpbi.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/manipulating_visualizing/plot_haxby_rpbi.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/decoding/plot_haxby_searchlight.py",
		"/Users/bcipolli/code/MRI/nilearn/.travis.yml",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/version.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/tests/test_extmath.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/input_data/nifti_labels_masker.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/mass_univariate/tests/test_utils.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/decoding/plot_miyawaki_reconstruction.py",
		"/Users/bcipolli/code/MRI/nilearn/continuous_integration/show-python-packages-versions.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/signal.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/plotting/glass_brain_files/plot_align_svg.py",
		"/Users/bcipolli/code/MRI/nilearn/LICENSE",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/utils.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/plotting/glass_brain_files/generate_json.sh",
		"/Users/bcipolli/code/MRI/nilearn/examples/decoding/plot_kay_etal_2008.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/functional.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/fetch.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets.py",
		"/Users/bcipolli/code/MRI/nilearn/scripts/convert_haxby_2011.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/plotting/glass_brain_files/brain_schematics_top.json",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/plotting/glass_brain_files/brain_schematics_front.json",
		"/Users/bcipolli/code/MRI/nilearn/examples/plot_haxby_etal_2011.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/localizer.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/tests/test_datasets_fetching.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/tests/__init__.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/manipulating_visualizing/plot_mask_computation.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/tests/test_datasets_utils.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/tests/tools.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/__init__.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/atlas.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/template.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/anatomical.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/resting_state.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/manipulating_visualizing/plot_affine_transformation.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/tests/test_numpy_conversions.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/datasets/tests/data/spm_confounds.txt",
		"/Users/bcipolli/code/MRI/nilearn/research/plot_canica_cuts.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/decomposition/multi_pca.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/decoding/plot_haxby_multiclass.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/input_data/multi_nifti_masker.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/decoding/searchlight.py",
		"/Users/bcipolli/code/MRI/nilearn/research/plot_canica_twice.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/connectivity/plot_ica_resting_state.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn.sublime-project",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/plotting/tests/test_find_cuts.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/input_data/nifti_region.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/group_sparse_covariance.py",
		"/Users/bcipolli/code/MRI/nilearn/research/mpl.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/plot_nifti_simple.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/connectivity/newissue.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/.gitignore",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/input_data/hemisphere_masker.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/input_data/__init__.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/input_data/tests/test_base_masker.py",
		"/Users/bcipolli/code/MRI/nilearn/continuous_integration/install.sh",
		"/Users/bcipolli/code/MRI/nilearn/.gitignore",
		"/Users/bcipolli/code/MRI/nilearn/examples/decoding/plot_haxby_grid_search.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/haxby_svc_weights.nii",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/tests/data/pymvpa-exampledata.tar.bz2",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/_utils/exceptions.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/plotting/edge_detect.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/decomposition/tests/test_multi_pca.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/input_data/tests/test_multi_nifti_masker.py",
		"/Users/bcipolli/code/MRI/nilearn/research/plot_rsa.py",
		"/Users/bcipolli/code/MRI/nilearn/research/COGSCI2015.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/decoding/plot_oasis_vbm.py",
		"/Users/bcipolli/code/MRI/nilearn/research/parcellation.nii",
		"/Users/bcipolli/code/MRI/nilearn/examples/decoding/plot_haxby_full_analysis.py",
		"/Users/bcipolli/code/MRI/nilearn/examples/decoding/haxby_face_vs_house.nii",
		"/Users/bcipolli/code/MRI/nilearn/examples/decoding/plot_haxby_different_estimators.py",
		"/Users/bcipolli/code/MRI/nilearn/AUTHORS.rst",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/tests/test_group_sparse_covariance.py",
		"/Users/bcipolli/code/MRI/nilearn/nilearn/decoding/tests/test_searchlight.py",
		"/Users/bcipolli/code/MRI/nilearn/doc/sphinxext/numpy_ext/numpydoc.py",
		"/Users/bcipolli/code/MRI/nilearn/doc/images/feature_array.svg"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"pdb",
			".1",
			"0.1",
			"facecolor",
			".annotate",
			"set_",
			".annotate",
			"bbox",
			"draw_position",
			"draw_left_right",
			"draw_position",
			"left_right",
			"draw_position",
			"draw_left_right",
			"_load_mask_img",
			"generator.random",
			"putation expects 3D or 4D images, but",
			"assert_raises_regexp",
			"boolean",
			"valueerror",
			"ata must be a 4D Niimg-like object. You ",
			"ata must be a 4D Niimg-like object. You provided a 3D image(s), of",
			"_unmask_nd",
			"img_3d",
			"concat_niimgs",
			"pdb",
			"concat_niimgs",
			"return_iterator",
			"pdb",
			"check_nii",
			"_apply_mask_fmri",
			"nilearn.",
			"nilearn",
			"test__safe_cache_flush",
			".cache(",
			"_safe_cache",
			"input_data",
			"mem",
			"memory_class",
			"examples",
			"cache(",
			"typeerror",
			"<<<",
			"assert_",
			"isinstance",
			"ismember",
			"iter",
			"ismember",
			"none",
			"confounds",
			"test_warning_shape",
			"sking.apply_mask, data_img, mask_img_4",
			"typeerror",
			"valueerror",
			"typeerror",
			"pdb",
			"def inverse_transform",
			"inverse_transform",
			"split_bilateral_rois",
			"hemisphere",
			"<<<<<",
			"<<<",
			"Clearing cache ",
			"verbose",
			"grid_to_graph",
			"<<<<<",
			"sample_mask",
			"memory_level",
			"<<<<",
			"condition_mask",
			"house",
			"ng massively univariate a",
			"randomized_parcellation_based_inference",
			"threshold",
			"wardagglom",
			"LooseVersion",
			"VERSION",
			"agglomerative",
			"wardagg",
			"ward",
			"<<<",
			"sp.",
			"<<<",
			"<<<<",
			"def mean_img",
			".func",
			"def smooth_img",
			"smooth_img",
			"def mean_img",
			"mean_img",
			"ward",
			"labelsmasker",
			"example",
			"NiftiLabelsMasker",
			"generate_json.sh",
			"svg_to_json_converter",
			"plot_align_svg",
			"mvpa",
			"uncompress",
			"_uncompress_file",
			"Target file cannot be found",
			"httperror",
			"(Pdb) ",
			"overwrite",
			"pdb",
			"parse",
			"url",
			"abort",
			"ioerror",
			"nersc",
			"brainomics",
			"file_mask",
			"os.path.dirname(__file__)",
			"__file__",
			"os.abspath",
			"# ",
			"recarray",
			"flatten",
			"fetch_miyawaki_2008",
			"file_mock",
			"miyawaki",
			"bald.nii",
			"url_mock",
			"tmpdir",
			"tools.tmpdir",
			"tmpdir",
			"datadir",
			"currdir"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"get_filemock()",
			"get_urlmock()",
			"get_tmpdir()",
			"tools.tmpdir",
			"calc_neighbor_dist",
			"neighbor_dist",
			"# ## ",
			"dirpath",
			"r_plot_ringo_figure",
			"r_plot_training_curves",
			"r_plot_training_stats",
			"r_",
			"r_collect_data",
			"r_get_cache_data",
			"r_collect_data_looped_tdlc",
			"r_load_cache_file",
			"r_make_cache_file",
			"r_save_cache_data",
			"r_train_and_analyze_all",
			"r_train_and_analyze_many",
			"'",
			"negative_mask",
			"None",
			"DEFAULT_MEMORY",
			"output_types",
			"my_squareform",
			"guru_getOutPath('cache')",
			"guru_getOutPath",
			"r_print_pats",
			"r_plot_ringo_figures",
			"plot_ringo_figures",
			"r_train_and_analyze_all",
			"r_train_many",
			"r_train_one",
			"DefaultMemory()",
			"url_request",
			"import operator",
			"import cPickle",
			"import cpickle",
			"cPickle",
			"StringIO",
			"urllib.parse.quote",
			"with contextlib.closing",
			"with contextlib.closings(assert_raises(",
			"from past.builtins import xrange",
			"range",
			"string_types",
			"18, 9",
			"12, 6"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "vishaal.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"plotting",
				"nilearn/plotting/img_plotting.py"
			],
			[
				"mosaic",
				"nilearn/plotting/mosaic.py"
			],
			[
				"img",
				"nilearn/plotting/img_plotting.py"
			],
			[
				"issue",
				"issues/issue449.py"
			],
			[
				"displa",
				"nilearn/plotting/displays.py"
			],
			[
				"issue449",
				"issues/issue449.py"
			],
			[
				"displays",
				"nilearn/plotting/displays.py"
			],
			[
				"masking",
				"nilearn/masking.py"
			],
			[
				"masking.",
				"nilearn/masking.py"
			],
			[
				"image",
				"nilearn/image/image.py"
			],
			[
				"test_mask",
				"nilearn/tests/test_masking.py"
			],
			[
				"temak",
				"nilearn/tests/test_masking.py"
			],
			[
				"newiss",
				"issues/newissue.py"
			],
			[
				"test_nifti_masker.py",
				"nilearn/input_data/tests/test_nifti_masker.py"
			],
			[
				"test_conver",
				"nilearn/tests/test_niimg_conversions.py"
			],
			[
				"utils/ii",
				"nilearn/_utils/niimg_conversions.py"
			],
			[
				"base_mask",
				"nilearn/input_data/base_masker.py"
			],
			[
				"base_masker",
				"nilearn/input_data/base_masker.py"
			],
			[
				"test_masking",
				"nilearn/tests/test_masking.py"
			],
			[
				"caching",
				"nilearn/caching.py"
			],
			[
				"testcac",
				"nilearn/tests/test_cache_mixin.py"
			],
			[
				"plotadhd",
				"examples/connectivity/plot_adhd_covariance.py"
			],
			[
				"cache",
				"nilearn/_utils/cache_mixin.py"
			],
			[
				"test_cache",
				"nilearn/tests/test_cache_mixin.py"
			],
			[
				"bae",
				"nilearn/input_data/base_masker.py"
			],
			[
				"byhemi",
				"examples/connectivity/plot_adhd_covariance_byhemi.py"
			],
			[
				"testimgpl",
				"nilearn/plotting/tests/test_img_plotting.py"
			],
			[
				"restspec",
				"examples/connectivity/plot_rest_spectral.py"
			],
			[
				"plotcanicrest",
				"examples/connectivity/plot_canica_resting_state.py"
			],
			[
				"find_cuts",
				"nilearn/plotting/find_cuts.py"
			],
			[
				"niftimas",
				"nilearn/input_data/nifti_masker.py"
			],
			[
				"roi_",
				"examples/manipulating_visualizing/plot_roi_extraction.py"
			],
			[
				"niftima",
				"nilearn/input_data/nifti_masker.py"
			],
			[
				"haxrp",
				"examples/manipulating_visualizing/plot_haxby_rpbi.py"
			],
			[
				"canica",
				"nilearn/decomposition/canica.py"
			],
			[
				"test_perm",
				"nilearn/mass_univariate/tests/test_permuted_least_squares.py"
			],
			[
				"__init__",
				"nilearn/_utils/__init__.py"
			],
			[
				"niftilabel",
				"nilearn/input_data/nifti_labels_masker.py"
			],
			[
				"nift",
				"nilearn/input_data/nifti_maps_masker.py"
			],
			[
				"spect",
				"examples/connectivity/plot_rest_spectral.py"
			],
			[
				"plot_rest_spec",
				"examples/connectivity/plot_rest_spectral.py"
			],
			[
				"plot_align_svg",
				"nilearn/plotting/glass_brain_files/plot_align_svg.py"
			],
			[
				"kay_",
				"examples/decoding/plot_kay_etal_2008.py"
			],
			[
				"datasets.p",
				"nilearn/datasets.py"
			],
			[
				"funct",
				"nilearn/datasets/functional.py"
			],
			[
				"testing",
				"nilearn/_utils/testing.py"
			],
			[
				"testing.py",
				"nilearn/_utils/testing.py"
			],
			[
				"atlas",
				"nilearn/datasets/atlas.py"
			],
			[
				"test_numpy_conversions",
				"nilearn/tests/test_numpy_conversions.py"
			],
			[
				"test_signal",
				"nilearn/tests/test_signal.py"
			],
			[
				"dataset",
				"nilearn/datasets.py"
			],
			[
				"datasets.py",
				"nilearn/datasets.py"
			],
			[
				"multipca",
				"nilearn/decomposition/multi_pca.py"
			],
			[
				"multipc",
				"nilearn/decomposition/multi_pca.py"
			],
			[
				"base",
				"nilearn/input_data/base_masker.py"
			],
			[
				"multinifit",
				"nilearn/input_data/multi_nifti_masker.py"
			],
			[
				"canic",
				"nilearn/decomposition/canica.py"
			],
			[
				"multi",
				"nilearn/decomposition/multi_pca.py"
			],
			[
				"mult",
				"nilearn/decomposition/multi_pca.py"
			],
			[
				"plotica",
				"examples/connectivity/plot_canica_resting_state.py"
			],
			[
				"find_cut",
				"nilearn/plotting/find_cuts.py"
			],
			[
				"img_pl",
				"nilearn/plotting/img_plotting.py"
			],
			[
				"adhd",
				"examples/connectivity/plot_adhd_covariance.py"
			],
			[
				"multip",
				"nilearn/decomposition/multi_pca.py"
			],
			[
				"iss",
				"issues/issue449.py"
			],
			[
				"ploiex",
				"examples/manipulating_visualizing/plot_roi_extraction.py"
			],
			[
				"display",
				"nilearn/plotting/displays.py"
			],
			[
				"img_plotting.py",
				"nilearn/plotting/img_plotting.py"
			],
			[
				"",
				"LICENSE"
			],
			[
				"examples/git",
				"examples/.gitignore"
			],
			[
				".giti",
				".gitignore"
			],
			[
				"testmulti",
				"nilearn/decomposition/tests/test_multi_pca.py"
			],
			[
				"multi_pca",
				"nilearn/decomposition/multi_pca.py"
			],
			[
				"niftimask",
				"nilearn/input_data/nifti_masker.py"
			],
			[
				"nifti",
				"nilearn/input_data/nifti_masker.py"
			],
			[
				"multi_",
				"nilearn/decomposition/multi_pca.py"
			],
			[
				"plot_ica_resting",
				"examples/connectivity/plot_ica_resting_state.py"
			],
			[
				"niftiregion",
				"nilearn/input_data/nifti_region.py"
			],
			[
				"group_s",
				"nilearn/group_sparse_covariance.py"
			],
			[
				"datasets.",
				"nilearn/datasets.py"
			],
			[
				"multimask",
				"nilearn/input_data/multi_nifti_masker.py"
			],
			[
				"multimasker",
				"nilearn/input_data/multi_nifti_masker.py"
			],
			[
				"nultipca",
				"nilearn/decomposition/multi_pca.py"
			],
			[
				"tetperm",
				"nilearn/mass_univariate/tests/test_permuted_least_squares.py"
			],
			[
				"test",
				"nilearn/decomposition/tests/test_canica.py"
			],
			[
				"edgedete",
				"nilearn/plotting/edge_detect.py"
			],
			[
				"test_group",
				"nilearn/tests/test_group_sparse_covariance.py"
			],
			[
				"testdat",
				"nilearn/tests/test_datasets.py"
			],
			[
				"testcache",
				"nilearn/tests/test_cache_mixin.py"
			],
			[
				"testmult",
				"nilearn/input_data/tests/test_multi_nifti_masker.py"
			],
			[
				"test_img_pl",
				"nilearn/plotting/tests/test_img_plotting.py"
			],
			[
				"testsearc",
				"nilearn/decoding/tests/test_searchlight.py"
			],
			[
				"testsig",
				"nilearn/tests/test_signal.py"
			],
			[
				"testreg",
				"nilearn/tests/test_region.py"
			],
			[
				"testmask",
				"nilearn/tests/test_masking.py"
			],
			[
				"testgr",
				"nilearn/tests/test_group_sparse_covariance.py"
			],
			[
				"cache.py",
				"nilearn/_utils/cache.py"
			],
			[
				"haxbysearc",
				"examples/decoding/plot_haxby_searchlight.py"
			],
			[
				"de_stats",
				"experiments/demos_and_figures/de_stats_ipd.m"
			],
			[
				"de_calc_nn_dist",
				"code/analyze/ac/stats/de_calc_nn_dist.m"
			],
			[
				"guru_neg",
				"code/lib/guru/plot/guru_negsemilogy.m"
			],
			[
				"nifti_masker",
				"nilearn/input_data/nifti_masker.py"
			],
			[
				"ignal",
				"nilearn/signal.py"
			],
			[
				"ma",
				"nilearn/input_data/base_masker.py"
			],
			[
				"haxby_simple",
				"examples/plot_haxby_simple.py"
			],
			[
				"haxbysimple",
				"examples/plot_haxby_simple.py"
			],
			[
				"trainall",
				"code/train/r_train_and_analyze_all.m"
			],
			[
				"analyze_train",
				"code/analysis/r_analyze_training.m"
			],
			[
				"aanlyze_tr",
				"code/analysis/r_analyze_training.m"
			],
			[
				"r_train_and_analyze_all",
				"code/train/r_train_and_analyze_all.m"
			],
			[
				"massage",
				"code/_init/r_massage_params.m"
			],
			[
				"r_get_cache_data",
				"code/analysis/collect/r_get_cache_data.m"
			],
			[
				"r_get",
				"code/analysis/collect/r_get_cache_data.m"
			],
			[
				"r_get_cache",
				"code/analysis/collect/r_get_cache_data.m"
			],
			[
				"collect_data",
				"code/analysis/collect/r_collect_data.m"
			],
			[
				"dataloop",
				"code/analysis/collect/r_collect_data_looped.m"
			],
			[
				"r_collect_data",
				"code/analysis/collect/r_collect_data.m"
			],
			[
				"get_cache",
				"code/analysis/collect/r_get_cache_data.m"
			],
			[
				"colelct_data_loo",
				"code/analysis/collect/r_collect_data_looped.m"
			],
			[
				"cache_file",
				"code/analysis/collect/r_load_cache_file.m"
			],
			[
				"collect_datatd",
				"code/analysis/collect/r_collect_data_looped_tdlc.m"
			],
			[
				"collect",
				"code/analysis/collect/r_collect_data.m"
			],
			[
				"r_collect",
				"code/analysis/collect/r_collect_data_looped.m"
			],
			[
				"r_record",
				"code/train/r_record_lesion_performance.m"
			],
			[
				"resilbatc",
				"code/train/r_train_resilient_batch.m"
			],
			[
				"resilbatch",
				"code/train/r_train_resilient_batch.m"
			],
			[
				"experimentargs",
				"scripts/COGSCI2015/experiment_parity_args.m"
			],
			[
				"trainbatch",
				"code/train/r_train_resilient_batch.m"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 512.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 348.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
